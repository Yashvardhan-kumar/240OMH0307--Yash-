# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YJnO-rHM9Q-kG1o4AB5rUEu9eRAjdzeL
"""

from google.colab import drive

import pandas as pd

data = pd.read_csv('/content/drive/MyDrive/dataset/athlete_events.csv')

data = pd.read_csv('/content/drive/MyDrive/dataset/olympics2024.csv')

data = pd.read_csv('/content/drive/MyDrive/dataset/athlete_events.csv.zip')

data = pd.read_csv('/content/drive/MyDrive/dataset/noc_regions.csv')

import pandas as pd
import matplotlib.pyplot as plt

# Load data (replace with your actual data file)
df = pd.read_csv("/content/drive/MyDrive/dataset/olympics2024.csv")

# Filter and sort by Gold medals
top_10_gold = df.groupby("Country")["Gold"].sum().sort_values(ascending=False).head(10)

# Plot
top_10_gold.plot(kind="bar", color="gold")
plt.title("Top 10 Countries with Most Gold Medals")
plt.ylabel("Gold Medals")
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the datasets
olympics_data = pd.read_csv('/content/drive/MyDrive/dataset/olympics2024.csv')
noc_regions_data = pd.read_csv('/content/drive/MyDrive/dataset/noc_regions.csv')
athlete_events_data = pd.read_csv('/content/drive/MyDrive/dataset/athlete_events.csv')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the datasets
olympics_data = pd.read_csv('/content/drive/MyDrive/dataset/olympics2024.csv')
noc_regions_data = pd.read_csv('/content/drive/MyDrive/dataset/noc_regions.csv')
athlete_events_data = pd.read_csv('/content/drive/MyDrive/dataset/athlete_events.csv')

# Task 2: Top 10 countries in Gymnastics over years
def plot_top_gymnastics():
    # Filter data for Gymnastics
    gymnastics = athlete_events_data[athlete_events_data['Sport'] == 'Gymnastics']

    # Group by NOC and Year to count medals
    gymnastics_medals = gymnastics.groupby(['NOC', 'Year'])['Medal'].count().reset_index()

    # Merge with NOC regions to get full country names
    gymnastics_medals = gymnastics_medals.merge(noc_regions_data, on='NOC', how='left')

    # Aggregate total medals by country
    total_medals = gymnastics_medals.groupby('region')['Medal'].sum().sort_values(ascending=False).head(10)

    # Filter data for top 10 countries
    top_countries = total_medals.index
    top_gymnastics = gymnastics_medals[gymnastics_medals['region'].isin(top_countries)]

    # Plot the data
    plt.figure(figsize=(14, 8))
    sns.lineplot(data=top_gymnastics, x='Year', y='Medal', hue='region', marker="o")
    plt.title('Top 10 Countries in Gymnastics Over Years', fontsize=16)
    plt.xlabel('Year', fontsize=12)
    plt.ylabel('Number of Medals', fontsize=12)
    plt.legend(title='Country', loc='upper left', bbox_to_anchor=(1, 1))
    plt.tight_layout()
    plt.show()

# Run the function
plot_top_gymnastics()

# Load the datasets
olympics_data = pd.read_csv('/content/drive/MyDrive/dataset/olympics2024.csv')
noc_regions_data = pd.read_csv('/content/drive/MyDrive/dataset/noc_regions.csv')
athlete_events_data = pd.read_csv('/content/drive/MyDrive/dataset/athlete_events.csv')

# Task 3: Gender Participation Analysis
def plot_gender_participation():
    gender_counts = athlete_events_data.groupby(['Year', 'Sex'])['ID'].count().reset_index()
    plt.figure(figsize=(12, 8))
    sns.lineplot(data=gender_counts, x='Year', y='ID', hue='Sex', marker="o")
    plt.title('Gender Participation Over Time', fontsize=16)
    plt.xlabel('Year', fontsize=12)
    plt.ylabel('Number of Participants', fontsize=12)
    plt.legend(title='Gender')
    plt.tight_layout()
    plt.show()
    # Run the function
plot_gender_participation()

# Load the datasets
olympics_data = pd.read_csv('/content/drive/MyDrive/dataset/olympics2024.csv')
noc_regions_data = pd.read_csv('/content/drive/MyDrive/dataset/noc_regions.csv')
athlete_events_data = pd.read_csv('/content/drive/MyDrive/dataset/athlete_events.csv')

# Task 4: Sports Count Over Time
def plot_sports_count():
    # Count unique sports by year
    sports_count = athlete_events_data.groupby('Year')['Sport'].nunique().reset_index()

    # Plot
    plt.figure(figsize=(14, 8))
    sns.lineplot(data=sports_count, x='Year', y='Sport', marker="o", color='blue')
    plt.title('Number of Sports Over Time', fontsize=16)
    plt.xlabel('Year', fontsize=12)
    plt.ylabel('Number of Sports', fontsize=12)
    plt.tight_layout()
    plt.show()

# Run the function
plot_sports_count()

# Load the datasets
olympics_data = pd.read_csv('/content/drive/MyDrive/dataset/olympics2024.csv')
noc_regions_data = pd.read_csv('/content/drive/MyDrive/dataset/noc_regions.csv')
athlete_events_data = pd.read_csv('/content/drive/MyDrive/dataset/athlete_events.csv')

# Task 5: Age Distribution of Gold Medalists
def plot_age_distribution():
    # Filter only gold medalists
    gold_medalists = athlete_events_data[athlete_events_data['Medal'] == 'Gold']

    # Plot
    plt.figure(figsize=(14, 8))
    sns.histplot(gold_medalists['Age'].dropna(), kde=True, bins=30, color='orange')
    plt.title('Age Distribution of Gold Medalists', fontsize=16)
    plt.xlabel('Age', fontsize=12)
    plt.ylabel('Frequency', fontsize=12)
    plt.tight_layout()
    plt.show()

# Run the function
plot_age_distribution()

# Load the datasets
olympics_data = pd.read_csv('/content/drive/MyDrive/dataset/olympics2024.csv')
noc_regions_data = pd.read_csv('/content/drive/MyDrive/dataset/noc_regions.csv')
athlete_events_data = pd.read_csv('/content/drive/MyDrive/dataset/athlete_events.csv')

# Task 6: Summer Sports Over Time
def plot_summer_sports():
    # Filter data for Summer Olympics
    summer_sports = athlete_events_data[athlete_events_data['Season'] == 'Summer']

    # Count unique sports by year
    sports_count = summer_sports.groupby('Year')['Sport'].nunique().reset_index()

    # Plot
    plt.figure(figsize=(14, 8))
    sns.lineplot(data=sports_count, x='Year', y='Sport', marker="o", color='green')
    plt.title('Number of Summer Olympic Sports Over Time', fontsize=16)
    plt.xlabel('Year', fontsize=12)
    plt.ylabel('Number of Sports', fontsize=12)
    plt.tight_layout()
    plt.show()

# Run the function
plot_summer_sports()

# Load the datasets
olympics_data = pd.read_csv('/content/drive/MyDrive/dataset/olympics2024.csv')
noc_regions_data = pd.read_csv('/content/drive/MyDrive/dataset/noc_regions.csv')
athlete_events_data = pd.read_csv('/content/drive/MyDrive/dataset/athlete_events.csv')

# Task 7: Winter Sports Over Time
def plot_winter_sports():
    # Filter data for Winter Olympics
    winter_sports = athlete_events_data[athlete_events_data['Season'] == 'Winter']

    # Count unique sports by year
    sports_count = winter_sports.groupby('Year')['Sport'].nunique().reset_index()

    # Plot
    plt.figure(figsize=(14, 8))
    sns.lineplot(data=sports_count, x='Year', y='Sport', marker="o", color='purple')
    plt.title('Number of Winter Olympic Sports Over Time', fontsize=16)
    plt.xlabel('Year', fontsize=12)
    plt.ylabel('Number of Sports', fontsize=12)
    plt.tight_layout()
    plt.show()

# Run the function
plot_winter_sports()

# Load the datasets
olympics_data = pd.read_csv('/content/drive/MyDrive/dataset/olympics2024.csv')
noc_regions_data = pd.read_csv('/content/drive/MyDrive/dataset/noc_regions.csv')
athlete_events_data = pd.read_csv('/content/drive/MyDrive/dataset/athlete_events.csv')

# Task 8: Average Height of Male and Female Athletes Over Years
def plot_avg_height():
    # Group by year and gender to calculate average height
    avg_height = athlete_events_data.groupby(['Year', 'Sex'])['Height'].mean().reset_index()

    # Plot
    plt.figure(figsize=(14, 8))
    sns.lineplot(data=avg_height, x='Year', y='Height', hue='Sex', marker="o")
    plt.title('Average Height of Male and Female Athletes Over Years', fontsize=16)
    plt.xlabel('Year', fontsize=12)
    plt.ylabel('Average Height (cm)', fontsize=12)
    plt.legend(title='Gender')
    plt.tight_layout()
    plt.show()

# Run the function
plot_avg_height()

# Load the datasets
olympics_data = pd.read_csv('/content/drive/MyDrive/dataset/olympics2024.csv')
noc_regions_data = pd.read_csv('/content/drive/MyDrive/dataset/noc_regions.csv')
athlete_events_data = pd.read_csv('/content/drive/MyDrive/dataset/athlete_events.csv')

# Task 9: Top Performing Athletes in Ice Hockey
def plot_top_ice_hockey():
    # Filter data for Ice Hockey
    ice_hockey = athlete_events_data[athlete_events_data['Sport'] == 'Ice Hockey']

    # Group by athlete name and gender to count medals
    top_athletes = (ice_hockey.groupby(['Name', 'Sex'])['Medal']
                    .count()
                    .sort_values(ascending=False)
                    .head(10)
                    .reset_index())

    # Plot
    plt.figure(figsize=(14, 8))
    sns.barplot(data=top_athletes, x='Medal', y='Name', hue='Sex', dodge=True)
    plt.title('Top Performing Athletes in Ice Hockey', fontsize=16)
    plt.xlabel('Number of Medals', fontsize=12)
    plt.ylabel('Athlete Name', fontsize=12)
    plt.tight_layout()
    plt.show()

# Run the function
plot_top_ice_hockey()

# Load the datasets
olympics_data = pd.read_csv('/content/drive/MyDrive/dataset/olympics2024.csv')
noc_regions_data = pd.read_csv('/content/drive/MyDrive/dataset/noc_regions.csv')
athlete_events_data = pd.read_csv('/content/drive/MyDrive/dataset/athlete_events.csv')

# Task 10: Analyse Indiaâ€™s Performance in All Olympic Games
def plot_india_performance():
    # Filter data for India
    india_data = athlete_events_data[athlete_events_data['NOC'] == 'IND']

    # Group by year and medal type
    india_medals = india_data.groupby(['Year', 'Medal'])['ID'].count().reset_index()
    india_medals.rename(columns={'ID': 'Count'}, inplace=True)

    # Plot
    plt.figure(figsize=(14, 8))
    sns.barplot(data=india_medals, x='Year', y='Count', hue='Medal')
    plt.title("India's Performance in All Olympic Games", fontsize=16)
    plt.xlabel('Year', fontsize=12)
    plt.ylabel('Number of Medals', fontsize=12)
    plt.legend(title='Medal Type')
    plt.tight_layout()
    plt.show()

# Run the function
plot_india_performance()